{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35861594",
   "metadata": {},
   "source": [
    "### Group 1: William Le, Greg Ige, Maria Isaac, Mariya Jose, Shehroz Kayani"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68ea5161",
   "metadata": {},
   "outputs": [],
   "source": [
    "import autogluon as ag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d6587b19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "82658ca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from autogluon.tabular import TabularPredictor\n",
    "from autogluon.tabular import TabularDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ae1fbf29",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score, r2_score, roc_auc_score, roc_curve, cohen_kappa_score\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from sklearn.utils import resample\n",
    "\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.decomposition import PCA\n",
    "import seaborn as sns; sns.set() \n",
    "import matplotlib.pyplot as plt\n",
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5379d226",
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'Data_Expression_mRNA_9classes.csv'\n",
    "datanew = pd.read_csv(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c4070bc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Classes</th>\n",
       "      <th>gen1</th>\n",
       "      <th>gen2</th>\n",
       "      <th>gen3</th>\n",
       "      <th>gen4</th>\n",
       "      <th>gen5</th>\n",
       "      <th>gen6</th>\n",
       "      <th>gen7</th>\n",
       "      <th>gen8</th>\n",
       "      <th>gen9</th>\n",
       "      <th>...</th>\n",
       "      <th>gen2996</th>\n",
       "      <th>gen2997</th>\n",
       "      <th>gen2998</th>\n",
       "      <th>gen2999</th>\n",
       "      <th>gen3000</th>\n",
       "      <th>gen3001</th>\n",
       "      <th>gen3002</th>\n",
       "      <th>gen3003</th>\n",
       "      <th>gen3004</th>\n",
       "      <th>gen3005</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 3006 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Classes  gen1  gen2  gen3  gen4  gen5  gen6  gen7  gen8  gen9  ...  \\\n",
       "0        1     0     0     0     3     0     0     3     0     0  ...   \n",
       "1        1     3     1     0     2     2     2     2     1     0  ...   \n",
       "2        1     3     1     6     4     1     2     1     0     5  ...   \n",
       "3        1     0     0     0     0     0     0     0     0     0  ...   \n",
       "4        1     1     1     1     0     0     0     0     0     2  ...   \n",
       "\n",
       "   gen2996  gen2997  gen2998  gen2999  gen3000  gen3001  gen3002  gen3003  \\\n",
       "0        0        0        0        0        0        0        0        0   \n",
       "1        0        0        0        0        0        0        0        0   \n",
       "2        0        0        0        0        0        0        0        0   \n",
       "3        0        0        0        0        0        0        0        0   \n",
       "4        0        0        0        0        0        0        0        0   \n",
       "\n",
       "   gen3004  gen3005  \n",
       "0        0        1  \n",
       "1        0        1  \n",
       "2        0        0  \n",
       "3        0        0  \n",
       "4        0        0  \n",
       "\n",
       "[5 rows x 3006 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datanew.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d8c3a6d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of       Classes  gen1  gen2  gen3  gen4  gen5  gen6  gen7  gen8  gen9  ...  \\\n",
       "0           1     0     0     0     3     0     0     3     0     0  ...   \n",
       "1           1     3     1     0     2     2     2     2     1     0  ...   \n",
       "2           1     3     1     6     4     1     2     1     0     5  ...   \n",
       "3           1     0     0     0     0     0     0     0     0     0  ...   \n",
       "4           1     1     1     1     0     0     0     0     0     2  ...   \n",
       "...       ...   ...   ...   ...   ...   ...   ...   ...   ...   ...  ...   \n",
       "4993        9     1     0     0     0     0     0     0     0     5  ...   \n",
       "4994        9     0     0     0     0     0     0     0     0     0  ...   \n",
       "4995        9     0     0     0     0     0     0     0     0     0  ...   \n",
       "4996        9     0     0     0     0     0     0     0     0     0  ...   \n",
       "4997        9     0     0     0     0     0     0     0     1     0  ...   \n",
       "\n",
       "      gen2996  gen2997  gen2998  gen2999  gen3000  gen3001  gen3002  gen3003  \\\n",
       "0           0        0        0        0        0        0        0        0   \n",
       "1           0        0        0        0        0        0        0        0   \n",
       "2           0        0        0        0        0        0        0        0   \n",
       "3           0        0        0        0        0        0        0        0   \n",
       "4           0        0        0        0        0        0        0        0   \n",
       "...       ...      ...      ...      ...      ...      ...      ...      ...   \n",
       "4993        0        0        0        0        0        0        0        0   \n",
       "4994        0        0        0        0        0        0        0        0   \n",
       "4995        0        0        0        0        0        0        0        0   \n",
       "4996        0        0        0        0        0        1        0        0   \n",
       "4997        0        0        0        0        0        0        0        0   \n",
       "\n",
       "      gen3004  gen3005  \n",
       "0           0        1  \n",
       "1           0        1  \n",
       "2           0        0  \n",
       "3           0        0  \n",
       "4           0        0  \n",
       "...       ...      ...  \n",
       "4993        1        2  \n",
       "4994        0        0  \n",
       "4995        0        0  \n",
       "4996        2        0  \n",
       "4997        0        0  \n",
       "\n",
       "[4998 rows x 3006 columns]>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datanew.describe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a7f2dba",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = TabularDataset(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f8338ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Classes\n",
       "3    1599\n",
       "1    1126\n",
       "4     579\n",
       "5     392\n",
       "6     390\n",
       "2     361\n",
       "8     245\n",
       "7     206\n",
       "9     100\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_column = 'Classes'\n",
    "data[label_column].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "17e192b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary of class variable: \n",
      " count    4998.000000\n",
      "mean        3.514006\n",
      "std         2.108832\n",
      "min         1.000000\n",
      "25%         2.000000\n",
      "50%         3.000000\n",
      "75%         5.000000\n",
      "max         9.000000\n",
      "Name: Classes, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"Summary of class variable: \\n\", data[label_column].describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c06e97d0",
   "metadata": {},
   "source": [
    "Splitting data into train and test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "27803092",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting data into train and test.\n",
    "train, test = train_test_split(datanew, random_state = 42, test_size = 0.3)\n",
    "y_test = test['Classes']\n",
    "test_nolab = test.drop(['Classes'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05123827",
   "metadata": {},
   "outputs": [],
   "source": [
    "dir_path = 'agModels-predictClasses'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "460338db",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning: path already exists! This predictor may overwrite an existing predictor! path=\"agModels-predictClasses\"\n",
      "Presets specified: ['best_quality']\n",
      "Setting dynamic_stacking from 'auto' to True. Reason: Enable dynamic_stacking when use_bag_holdout is disabled. (use_bag_holdout=False)\n",
      "Stack configuration (auto_stack=True): num_stack_levels=1, num_bag_folds=8, num_bag_sets=1\n",
      "Dynamic stacking is enabled (dynamic_stacking=True). AutoGluon will try to determine whether the input data is affected by stacked overfitting and enable or disable stacking as a consequence.\n",
      "Detecting stacked overfitting by sub-fitting AutoGluon on the input data. That is, copies of AutoGluon will be sub-fit on subset(s) of the data. Then, the holdout validation data is used to detect stacked overfitting.\n",
      "Sub-fit(s) time limit is: 120 seconds.\n",
      "Starting holdout-based sub-fit for dynamic stacking. Context path is: agModels-predictClasses\\ds_sub_fit\\sub_fit_ho.\n",
      "Running the sub-fit in a ray process to avoid memory leakage.\n",
      "Spend 72 seconds for the sub-fit(s) during dynamic stacking.\n",
      "Time left for full fit of AutoGluon: 48 seconds.\n",
      "Starting full fit now with num_stack_levels 1.\n",
      "Beginning AutoGluon training ... Time limit = 48s\n",
      "AutoGluon will save models to \"agModels-predictClasses\"\n",
      "=================== System Info ===================\n",
      "AutoGluon Version:  1.1.0\n",
      "Python Version:     3.11.5\n",
      "Operating System:   Windows\n",
      "Platform Machine:   AMD64\n",
      "Platform Version:   10.0.22631\n",
      "CPU Count:          12\n",
      "Memory Avail:       0.77 GB / 5.84 GB (13.2%)\n",
      "Disk Space Avail:   379.34 GB / 474.72 GB (79.9%)\n",
      "===================================================\n",
      "Train Data Rows:    3498\n",
      "Train Data Columns: 3005\n",
      "Label Column:       Classes\n",
      "Problem Type:       multiclass\n",
      "Preprocessing data ...\n",
      "Train Data Class Count: 9\n",
      "Using Feature Generators to preprocess the data ...\n",
      "Fitting AutoMLPipelineFeatureGenerator...\n",
      "\tAvailable Memory:                    678.72 MB\n",
      "\tTrain Data (Original)  Memory Usage: 80.20 MB (11.8% of available memory)\n",
      "\tWarning: Data size prior to feature transformation consumes 11.8% of available memory. Consider increasing memory or subsampling the data to avoid instability.\n",
      "\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n",
      "\tStage 1 Generators:\n",
      "\t\tFitting AsTypeFeatureGenerator...\n",
      "\tStage 2 Generators:\n",
      "\t\tFitting FillNaFeatureGenerator...\n",
      "\tStage 3 Generators:\n",
      "\t\tFitting IdentityFeatureGenerator...\n",
      "\tStage 4 Generators:\n",
      "\t\tFitting DropUniqueFeatureGenerator...\n",
      "\tStage 5 Generators:\n",
      "\t\tFitting DropDuplicatesFeatureGenerator...\n",
      "\tTypes of features in original data (raw dtype, special dtypes):\n",
      "\t\t('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "\tTypes of features in processed data (raw dtype, special dtypes):\n",
      "\t\t('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "\t27.5s = Fit runtime\n",
      "\t3005 features in original data used to generate 3005 features in processed data.\n",
      "\tTrain Data (Processed) Memory Usage: 80.20 MB (8.4% of available memory)\n",
      "Data preprocessing and feature engineering runtime = 28.12s ...\n",
      "AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n",
      "\tTo change this, specify the eval_metric parameter of Predictor()\n",
      "Large model count detected (112 configs) ... Only displaying the first 3 models of each family. To see all, set `verbosity=3`.\n",
      "User-specified model hyperparameters to be fit:\n",
      "{\n",
      "\t'NN_TORCH': [{}, {'activation': 'elu', 'dropout_prob': 0.10077639529843717, 'hidden_size': 108, 'learning_rate': 0.002735937344002146, 'num_layers': 4, 'use_batchnorm': True, 'weight_decay': 1.356433327634438e-12, 'ag_args': {'name_suffix': '_r79', 'priority': -2}}, {'activation': 'elu', 'dropout_prob': 0.11897478034205347, 'hidden_size': 213, 'learning_rate': 0.0010474382260641949, 'num_layers': 4, 'use_batchnorm': False, 'weight_decay': 5.594471067786272e-10, 'ag_args': {'name_suffix': '_r22', 'priority': -7}}],\n",
      "\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n",
      "\t'CAT': [{}, {'depth': 6, 'grow_policy': 'SymmetricTree', 'l2_leaf_reg': 2.1542798306067823, 'learning_rate': 0.06864209415792857, 'max_ctr_complexity': 4, 'one_hot_max_size': 10, 'ag_args': {'name_suffix': '_r177', 'priority': -1}}, {'depth': 8, 'grow_policy': 'Depthwise', 'l2_leaf_reg': 2.7997999596449104, 'learning_rate': 0.031375015734637225, 'max_ctr_complexity': 2, 'one_hot_max_size': 3, 'ag_args': {'name_suffix': '_r9', 'priority': -5}}],\n",
      "\t'XGB': [{}, {'colsample_bytree': 0.6917311125174739, 'enable_categorical': False, 'learning_rate': 0.018063876087523967, 'max_depth': 10, 'min_child_weight': 0.6028633586934382, 'ag_args': {'name_suffix': '_r33', 'priority': -8}}, {'colsample_bytree': 0.6628423832084077, 'enable_categorical': False, 'learning_rate': 0.08775715546881824, 'max_depth': 5, 'min_child_weight': 0.6294123374222513, 'ag_args': {'name_suffix': '_r89', 'priority': -16}}],\n",
      "\t'FASTAI': [{}, {'bs': 256, 'emb_drop': 0.5411770367537934, 'epochs': 43, 'layers': [800, 400], 'lr': 0.01519848858318159, 'ps': 0.23782946566604385, 'ag_args': {'name_suffix': '_r191', 'priority': -4}}, {'bs': 2048, 'emb_drop': 0.05070411322605811, 'epochs': 29, 'layers': [200, 100], 'lr': 0.08974235041576624, 'ps': 0.10393466140748028, 'ag_args': {'name_suffix': '_r102', 'priority': -11}}],\n",
      "\t'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n",
      "}\n",
      "AutoGluon will fit 2 stack levels (L1 to L2) ...\n",
      "Fitting 110 L1 models ...\n",
      "Fitting model: KNeighborsUnif_BAG_L1 ... Training model for up to 13.25s of the 19.82s of remaining time.\n",
      "\tWarning: Potentially not enough memory to safely train model. Estimated to require 0.151 GB out of 1.001 GB available memory (15.117%)... (20.000% of avail memory is the max safe size)\n",
      "\tTo avoid this warning, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.06 to avoid the warning)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\t0.6913\t = Validation score   (accuracy)\n",
      "\t0.58s\t = Training   runtime\n",
      "\t0.27s\t = Validation runtime\n",
      "Fitting model: KNeighborsDist_BAG_L1 ... Training model for up to 11.51s of the 18.08s of remaining time.\n",
      "\tWarning: Potentially not enough memory to safely train model. Estimated to require 0.151 GB out of 0.945 GB available memory (16.021%)... (20.000% of avail memory is the max safe size)\n",
      "\tTo avoid this warning, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.12 to avoid the warning)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\t0.693\t = Validation score   (accuracy)\n",
      "\t0.67s\t = Training   runtime\n",
      "\t0.32s\t = Validation runtime\n",
      "Fitting model: NeuralNetFastAI_BAG_L1 ... Training model for up to 9.57s of the 16.14s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 0.925 GB out of 0.946 GB available memory (97.854%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.14 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\tNot enough memory to train NeuralNetFastAI_BAG_L1... Skipping this model.\n",
      "Fitting model: LightGBMXT_BAG_L1 ... Training model for up to 8.03s of the 14.61s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 1.264 GB out of 0.968 GB available memory (130.546%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.50 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBMXT_BAG_L1... Skipping this model.\n",
      "Fitting model: LightGBM_BAG_L1 ... Training model for up to 6.6s of the 13.17s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 1.264 GB out of 0.968 GB available memory (130.590%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.50 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBM_BAG_L1... Skipping this model.\n",
      "Fitting model: RandomForestGini_BAG_L1 ... Training model for up to 5.12s of the 11.69s of remaining time.\n",
      "\tWarning: Reducing model 'n_estimators' from 300 -> 182 due to low time. Expected time usage reduced from 8.1s -> 5.1s...\n",
      "\t0.8016\t = Validation score   (accuracy)\n",
      "\t2.74s\t = Training   runtime\n",
      "\t4.11s\t = Validation runtime\n",
      "Fitting model: WeightedEnsemble_L2 ... Training model for up to 19.88s of the -1.07s of remaining time.\n",
      "\tEnsemble Weights: {'RandomForestGini_BAG_L1': 0.789, 'KNeighborsDist_BAG_L1': 0.211}\n",
      "\t0.8182\t = Validation score   (accuracy)\n",
      "\t0.08s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "Fitting 108 L2 models ...\n",
      "Fitting model: WeightedEnsemble_L3 ... Training model for up to 19.88s of the -22.88s of remaining time.\n",
      "\tEnsemble Weights: {'RandomForestGini_BAG_L1': 0.789, 'KNeighborsDist_BAG_L1': 0.211}\n",
      "\t0.8182\t = Validation score   (accuracy)\n",
      "\t0.05s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "AutoGluon training complete, total runtime = 71.09s ... Best model: \"WeightedEnsemble_L2\"\n",
      "TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"agModels-predictClasses\")\n"
     ]
    }
   ],
   "source": [
    "predictor = TabularPredictor(label = label_column, path = dir_path).fit(train, presets='best_quality', time_limit = 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8cf61ee6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions:  \n",
      " 84      1\n",
      "2470    3\n",
      "2803    3\n",
      "4986    9\n",
      "4923    6\n",
      "       ..\n",
      "2339    3\n",
      "1835    3\n",
      "4543    7\n",
      "4435    6\n",
      "1146    2\n",
      "Name: Classes, Length: 1500, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Use AutoGluon's trained classifier to make predictions on the new cell type and evaluate them:\n",
    "y_pred = predictor.predict(test_nolab)\n",
    "print(\"Predictions:  \\n\", y_pred)\n",
    "perf = predictor.evaluate_predictions(y_true=y_test, y_pred=y_pred, auxiliary_metrics=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a035ae11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>score_test</th>\n",
       "      <th>score_val</th>\n",
       "      <th>eval_metric</th>\n",
       "      <th>pred_time_test</th>\n",
       "      <th>pred_time_val</th>\n",
       "      <th>fit_time</th>\n",
       "      <th>pred_time_test_marginal</th>\n",
       "      <th>pred_time_val_marginal</th>\n",
       "      <th>fit_time_marginal</th>\n",
       "      <th>stack_level</th>\n",
       "      <th>can_infer</th>\n",
       "      <th>fit_order</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WeightedEnsemble_L3</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.437180</td>\n",
       "      <td>4.429792</td>\n",
       "      <td>3.463979</td>\n",
       "      <td>0.002765</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.052566</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WeightedEnsemble_L2</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.818182</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.437844</td>\n",
       "      <td>4.429792</td>\n",
       "      <td>3.487532</td>\n",
       "      <td>0.003429</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076119</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RandomForestGini_BAG_L1</td>\n",
       "      <td>0.814000</td>\n",
       "      <td>0.801601</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.135461</td>\n",
       "      <td>4.106307</td>\n",
       "      <td>2.743798</td>\n",
       "      <td>0.135461</td>\n",
       "      <td>4.106307</td>\n",
       "      <td>2.743798</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsDist_BAG_L1</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.692967</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.298954</td>\n",
       "      <td>0.323486</td>\n",
       "      <td>0.667615</td>\n",
       "      <td>0.298954</td>\n",
       "      <td>0.323486</td>\n",
       "      <td>0.667615</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>KNeighborsUnif_BAG_L1</td>\n",
       "      <td>0.694667</td>\n",
       "      <td>0.691252</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.334216</td>\n",
       "      <td>0.273021</td>\n",
       "      <td>0.578191</td>\n",
       "      <td>0.334216</td>\n",
       "      <td>0.273021</td>\n",
       "      <td>0.578191</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     model  score_test  score_val eval_metric  pred_time_test  \\\n",
       "0      WeightedEnsemble_L3    0.833333   0.818182    accuracy        0.437180   \n",
       "1      WeightedEnsemble_L2    0.833333   0.818182    accuracy        0.437844   \n",
       "2  RandomForestGini_BAG_L1    0.814000   0.801601    accuracy        0.135461   \n",
       "3    KNeighborsDist_BAG_L1    0.700000   0.692967    accuracy        0.298954   \n",
       "4    KNeighborsUnif_BAG_L1    0.694667   0.691252    accuracy        0.334216   \n",
       "\n",
       "   pred_time_val  fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n",
       "0       4.429792  3.463979                 0.002765                0.000000   \n",
       "1       4.429792  3.487532                 0.003429                0.000000   \n",
       "2       4.106307  2.743798                 0.135461                4.106307   \n",
       "3       0.323486  0.667615                 0.298954                0.323486   \n",
       "4       0.273021  0.578191                 0.334216                0.273021   \n",
       "\n",
       "   fit_time_marginal  stack_level  can_infer  fit_order  \n",
       "0           0.052566            3       True          5  \n",
       "1           0.076119            2       True          4  \n",
       "2           2.743798            1       True          3  \n",
       "3           0.667615            1       True          2  \n",
       "4           0.578191            1       True          1  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Leaderboard for the trained model\n",
    "predictor.leaderboard(test, silent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "220a4d29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Summary of fit() ***\n",
      "Estimated performance of each model:\n",
      "                     model  score_val eval_metric  pred_time_val  fit_time  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n",
      "0      WeightedEnsemble_L3   0.818182    accuracy       4.429792  3.463979                0.000000           0.052566            3       True          5\n",
      "1      WeightedEnsemble_L2   0.818182    accuracy       4.429792  3.487532                0.000000           0.076119            2       True          4\n",
      "2  RandomForestGini_BAG_L1   0.801601    accuracy       4.106307  2.743798                4.106307           2.743798            1       True          3\n",
      "3    KNeighborsDist_BAG_L1   0.692967    accuracy       0.323486  0.667615                0.323486           0.667615            1       True          2\n",
      "4    KNeighborsUnif_BAG_L1   0.691252    accuracy       0.273021  0.578191                0.273021           0.578191            1       True          1\n",
      "Number of models trained: 5\n",
      "Types of models trained:\n",
      "{'WeightedEnsembleModel', 'StackerEnsembleModel_KNN', 'StackerEnsembleModel_RF'}\n",
      "Bagging used: True  (with 8 folds)\n",
      "Multi-layer stack-ensembling used: True  (with 3 levels)\n",
      "Feature Metadata (Processed):\n",
      "(raw dtype, special dtypes):\n",
      "('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "Plot summary of models saved to file: agModels-predictClassesSummaryOfModels.html\n",
      "*** End of fit() summary ***\n"
     ]
    }
   ],
   "source": [
    "results = predictor.fit_summary(show_plot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7dedd87b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "image_path = 'bokeh_plot.png'\n",
    "display(Image(filename=r'C:\\Users\\willi\\Downloads\\bokeh_plot.png'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "257fb05c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AutoGluon infers problem type is:  multiclass\n",
      "AutoGluon identified the following types of features:\n",
      "('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n"
     ]
    }
   ],
   "source": [
    "print(\"AutoGluon infers problem type is: \", predictor.problem_type)\n",
    "print(\"AutoGluon identified the following types of features:\")\n",
    "print(predictor.feature_metadata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bd182288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: AutoGluon without SMOTE\n",
      "\n",
      "Accuracy:\n",
      " 0.814\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           1       0.82      0.71      0.76       359\n",
      "           2       0.96      0.25      0.39       105\n",
      "           3       0.76      0.96      0.85       469\n",
      "           4       0.91      0.93      0.92       166\n",
      "           5       0.87      0.91      0.89       119\n",
      "           6       0.75      0.87      0.80       120\n",
      "           7       0.98      0.74      0.84        65\n",
      "           8       0.86      0.83      0.85        66\n",
      "           9       0.90      0.58      0.71        31\n",
      "\n",
      "    accuracy                           0.81      1500\n",
      "   macro avg       0.87      0.75      0.78      1500\n",
      "weighted avg       0.83      0.81      0.80      1500\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      " [[256   0  93   3   3   3   0   1   0]\n",
      " [ 28  26  37   5   0   5   0   4   0]\n",
      " [ 13   1 452   0   1   2   0   0   0]\n",
      " [  4   0   2 154   3   2   0   1   0]\n",
      " [  1   0   1   3 108   4   0   2   0]\n",
      " [  5   0   5   1   3 104   0   1   1]\n",
      " [  3   0   2   2   3   7  48   0   0]\n",
      " [  3   0   0   2   1   3   1  55   1]\n",
      " [  1   0   1   0   2   9   0   0  18]]\n"
     ]
    }
   ],
   "source": [
    "y_pred2 = predictor.predict(test_nolab, model='RandomForestGini_BAG_L1')\n",
    "print('Model: AutoGluon without SMOTE')\n",
    "print('\\nAccuracy:\\n', accuracy_score(y_test, y_pred2))\n",
    "print('\\nClassification Report:\\n', classification_report(y_test, y_pred2))\n",
    "print('\\nConfusion Matrix:\\n', confusion_matrix(y_test, y_pred2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaa33902",
   "metadata": {},
   "source": [
    "### Resampling data using SMOTE "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b800e5cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Classes\n",
       "3    1599\n",
       "1    1126\n",
       "4     579\n",
       "5     392\n",
       "6     390\n",
       "2     361\n",
       "8     245\n",
       "7     206\n",
       "9     100\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datanew['Classes'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "11985912",
   "metadata": {},
   "outputs": [],
   "source": [
    "#using SMOTE to resample data\n",
    "X = datanew.drop([label_column], axis = 1)\n",
    "y = datanew[label_column]\n",
    "smote = SMOTE(random_state=42)\n",
    "X,y = smote.fit_resample(X,y)\n",
    "resampled_data = pd.concat([pd.DataFrame(X), pd.Series(y, name=label_column)], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "fb3ec845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Classes\n",
       "1    1599\n",
       "2    1599\n",
       "3    1599\n",
       "4    1599\n",
       "5    1599\n",
       "6    1599\n",
       "7    1599\n",
       "8    1599\n",
       "9    1599\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resampled_data['Classes'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ae8e9ee5",
   "metadata": {},
   "outputs": [],
   "source": [
    "resampled_tabular = TabularDataset(resampled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9c06122c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#split data into training and testing sets:\n",
    "train_new, test_new = train_test_split(resampled_tabular, random_state = 42, test_size = 0.3)\n",
    "y_test_new = test_new['Classes']\n",
    "test_nolab_new = test_new.drop(['Classes'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6b98a7f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning: path already exists! This predictor may overwrite an existing predictor! path=\"agModels-predictClasses\"\n",
      "Presets specified: ['best_quality']\n",
      "Setting dynamic_stacking from 'auto' to True. Reason: Enable dynamic_stacking when use_bag_holdout is disabled. (use_bag_holdout=False)\n",
      "Stack configuration (auto_stack=True): num_stack_levels=1, num_bag_folds=8, num_bag_sets=1\n",
      "Dynamic stacking is enabled (dynamic_stacking=True). AutoGluon will try to determine whether the input data is affected by stacked overfitting and enable or disable stacking as a consequence.\n",
      "Detecting stacked overfitting by sub-fitting AutoGluon on the input data. That is, copies of AutoGluon will be sub-fit on subset(s) of the data. Then, the holdout validation data is used to detect stacked overfitting.\n",
      "Sub-fit(s) time limit is: 120 seconds.\n",
      "Starting holdout-based sub-fit for dynamic stacking. Context path is: agModels-predictClasses\\ds_sub_fit\\sub_fit_ho.\n",
      "Running the sub-fit in a ray process to avoid memory leakage.\n",
      "Spend 54 seconds for the sub-fit(s) during dynamic stacking.\n",
      "Time left for full fit of AutoGluon: 66 seconds.\n",
      "Starting full fit now with num_stack_levels 1.\n",
      "Beginning AutoGluon training ... Time limit = 66s\n",
      "AutoGluon will save models to \"agModels-predictClasses\"\n",
      "=================== System Info ===================\n",
      "AutoGluon Version:  1.1.0\n",
      "Python Version:     3.11.5\n",
      "Operating System:   Windows\n",
      "Platform Machine:   AMD64\n",
      "Platform Version:   10.0.22631\n",
      "CPU Count:          12\n",
      "Memory Avail:       0.95 GB / 5.84 GB (16.3%)\n",
      "Disk Space Avail:   377.73 GB / 474.72 GB (79.6%)\n",
      "===================================================\n",
      "Train Data Rows:    10073\n",
      "Train Data Columns: 3005\n",
      "Label Column:       Classes\n",
      "Problem Type:       multiclass\n",
      "Preprocessing data ...\n",
      "Train Data Class Count: 9\n",
      "Using Feature Generators to preprocess the data ...\n",
      "Fitting AutoMLPipelineFeatureGenerator...\n",
      "\tAvailable Memory:                    771.54 MB\n",
      "\tTrain Data (Original)  Memory Usage: 230.94 MB (29.9% of available memory)\n",
      "\tWarning: Data size prior to feature transformation consumes 29.9% of available memory. Consider increasing memory or subsampling the data to avoid instability.\n",
      "\tInferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n",
      "\tStage 1 Generators:\n",
      "\t\tFitting AsTypeFeatureGenerator...\n",
      "\tStage 2 Generators:\n",
      "\t\tFitting FillNaFeatureGenerator...\n",
      "\tStage 3 Generators:\n",
      "\t\tFitting IdentityFeatureGenerator...\n",
      "\tStage 4 Generators:\n",
      "\t\tFitting DropUniqueFeatureGenerator...\n",
      "\tStage 5 Generators:\n",
      "\t\tFitting DropDuplicatesFeatureGenerator...\n",
      "\tTypes of features in original data (raw dtype, special dtypes):\n",
      "\t\t('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "\tTypes of features in processed data (raw dtype, special dtypes):\n",
      "\t\t('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "\t27.4s = Fit runtime\n",
      "\t3005 features in original data used to generate 3005 features in processed data.\n",
      "\tTrain Data (Processed) Memory Usage: 230.94 MB (12.7% of available memory)\n",
      "Data preprocessing and feature engineering runtime = 30.06s ...\n",
      "AutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n",
      "\tTo change this, specify the eval_metric parameter of Predictor()\n",
      "Large model count detected (112 configs) ... Only displaying the first 3 models of each family. To see all, set `verbosity=3`.\n",
      "User-specified model hyperparameters to be fit:\n",
      "{\n",
      "\t'NN_TORCH': [{}, {'activation': 'elu', 'dropout_prob': 0.10077639529843717, 'hidden_size': 108, 'learning_rate': 0.002735937344002146, 'num_layers': 4, 'use_batchnorm': True, 'weight_decay': 1.356433327634438e-12, 'ag_args': {'name_suffix': '_r79', 'priority': -2}}, {'activation': 'elu', 'dropout_prob': 0.11897478034205347, 'hidden_size': 213, 'learning_rate': 0.0010474382260641949, 'num_layers': 4, 'use_batchnorm': False, 'weight_decay': 5.594471067786272e-10, 'ag_args': {'name_suffix': '_r22', 'priority': -7}}],\n",
      "\t'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n",
      "\t'CAT': [{}, {'depth': 6, 'grow_policy': 'SymmetricTree', 'l2_leaf_reg': 2.1542798306067823, 'learning_rate': 0.06864209415792857, 'max_ctr_complexity': 4, 'one_hot_max_size': 10, 'ag_args': {'name_suffix': '_r177', 'priority': -1}}, {'depth': 8, 'grow_policy': 'Depthwise', 'l2_leaf_reg': 2.7997999596449104, 'learning_rate': 0.031375015734637225, 'max_ctr_complexity': 2, 'one_hot_max_size': 3, 'ag_args': {'name_suffix': '_r9', 'priority': -5}}],\n",
      "\t'XGB': [{}, {'colsample_bytree': 0.6917311125174739, 'enable_categorical': False, 'learning_rate': 0.018063876087523967, 'max_depth': 10, 'min_child_weight': 0.6028633586934382, 'ag_args': {'name_suffix': '_r33', 'priority': -8}}, {'colsample_bytree': 0.6628423832084077, 'enable_categorical': False, 'learning_rate': 0.08775715546881824, 'max_depth': 5, 'min_child_weight': 0.6294123374222513, 'ag_args': {'name_suffix': '_r89', 'priority': -16}}],\n",
      "\t'FASTAI': [{}, {'bs': 256, 'emb_drop': 0.5411770367537934, 'epochs': 43, 'layers': [800, 400], 'lr': 0.01519848858318159, 'ps': 0.23782946566604385, 'ag_args': {'name_suffix': '_r191', 'priority': -4}}, {'bs': 2048, 'emb_drop': 0.05070411322605811, 'epochs': 29, 'layers': [200, 100], 'lr': 0.08974235041576624, 'ps': 0.10393466140748028, 'ag_args': {'name_suffix': '_r102', 'priority': -11}}],\n",
      "\t'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n",
      "\t'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n",
      "}\n",
      "AutoGluon will fit 2 stack levels (L1 to L2) ...\n",
      "Fitting 110 L1 models ...\n",
      "Fitting model: KNeighborsUnif_BAG_L1 ... Training model for up to 23.95s of the 35.87s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 0.436 GB out of 1.410 GB available memory (30.903%)... (20.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.60 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train KNeighborsUnif_BAG_L1... Skipping this model.\n",
      "Fitting model: KNeighborsDist_BAG_L1 ... Training model for up to 22.06s of the 34.0s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 0.436 GB out of 1.443 GB available memory (30.209%)... (20.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=1.56 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train KNeighborsDist_BAG_L1... Skipping this model.\n",
      "Fitting model: NeuralNetFastAI_BAG_L1 ... Training model for up to 20.08s of the 32.01s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.665 GB out of 1.254 GB available memory (212.425%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=2.41 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\tNot enough memory to train NeuralNetFastAI_BAG_L1... Skipping this model.\n",
      "Fitting model: LightGBMXT_BAG_L1 ... Training model for up to 17.97s of the 29.89s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.569 GB out of 1.347 GB available memory (190.726%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=2.17 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBMXT_BAG_L1... Skipping this model.\n",
      "Fitting model: LightGBM_BAG_L1 ... Training model for up to 15.97s of the 27.88s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.569 GB out of 1.346 GB available memory (190.795%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=2.17 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBM_BAG_L1... Skipping this model.\n",
      "Fitting model: RandomForestGini_BAG_L1 ... Training model for up to 14.07s of the 25.99s of remaining time.\n",
      "\tWarning: Reducing model 'n_estimators' from 300 -> 99 due to low time. Expected time usage reduced from 41.2s -> 14.1s...\n",
      "\t0.9436\t = Validation score   (accuracy)\n",
      "\t5.81s\t = Training   runtime\n",
      "\t6.87s\t = Validation runtime\n",
      "Fitting model: RandomForestEntr_BAG_L1 ... Training model for up to 0.36s of the 12.27s of remaining time.\n",
      "\tWarning: Model is expected to require 16.2s to train, which exceeds the maximum time limit of 0.4s, skipping model...\n",
      "\tTime limit exceeded... Skipping RandomForestEntr_BAG_L1.\n",
      "Fitting model: WeightedEnsemble_L2 ... Training model for up to 35.94s of the 4.7s of remaining time.\n",
      "\tEnsemble Weights: {'RandomForestGini_BAG_L1': 1.0}\n",
      "\t0.9436\t = Validation score   (accuracy)\n",
      "\t0.01s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "Fitting 108 L2 models ...\n",
      "Fitting model: NeuralNetFastAI_BAG_L2 ... Training model for up to 4.66s of the 4.39s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.669 GB out of 0.958 GB available memory (278.434%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=3.14 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train NeuralNetFastAI_BAG_L2... Skipping this model.\n",
      "Fitting model: LightGBMXT_BAG_L2 ... Training model for up to 2.54s of the 2.27s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.573 GB out of 0.972 GB available memory (264.776%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=2.99 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBMXT_BAG_L2... Skipping this model.\n",
      "Fitting model: LightGBM_BAG_L2 ... Training model for up to 0.47s of the 0.2s of remaining time.\n",
      "\tWarning: Not enough memory to safely train model. Estimated to require 2.573 GB out of 1.010 GB available memory (254.893%)... (90.000% of avail memory is the max safe size)\n",
      "\tTo force training the model, specify the model hyperparameter \"ag.max_memory_usage_ratio\" to a larger value (currently 1.0, set to >=2.88 to avoid the error)\n",
      "\t\tTo set the same value for all models, do the following when calling predictor.fit: `predictor.fit(..., ag_args_fit={\"ag.max_memory_usage_ratio\": VALUE})`\n",
      "\t\tSetting \"ag.max_memory_usage_ratio\" to values above 1 may result in out-of-memory errors. You may consider using a machine with more memory as a safer alternative.\n",
      "\tNot enough memory to train LightGBM_BAG_L2... Skipping this model.\n",
      "Fitting model: WeightedEnsemble_L3 ... Training model for up to 35.92s of the -22.1s of remaining time.\n",
      "\tEnsemble Weights: {'RandomForestGini_BAG_L1': 1.0}\n",
      "\t0.9436\t = Validation score   (accuracy)\n",
      "\t0.01s\t = Training   runtime\n",
      "\t0.0s\t = Validation runtime\n",
      "AutoGluon training complete, total runtime = 88.52s ... Best model: \"WeightedEnsemble_L2\"\n",
      "TabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"agModels-predictClasses\")\n"
     ]
    }
   ],
   "source": [
    "predictor = TabularPredictor(label = 'Classes', path = dir_path).fit(train_new, presets='best_quality', time_limit = 120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "40d62d5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions:  \n",
      " 10143    6\n",
      "9450     6\n",
      "3753     8\n",
      "1662     3\n",
      "8814     5\n",
      "        ..\n",
      "13043    9\n",
      "10679    7\n",
      "8104     5\n",
      "13461    9\n",
      "7563     4\n",
      "Name: Classes, Length: 4318, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Use AutoGluon's trained classifier to make predictions on the new cell types and evaluate them:\n",
    "y_pred_new = predictor.predict(test_nolab_new)\n",
    "print(\"Predictions:  \\n\", y_pred_new)\n",
    "perf = predictor.evaluate_predictions(y_true=y_test_new, y_pred=y_pred_new, auxiliary_metrics=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "bdca0f61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>score_test</th>\n",
       "      <th>score_val</th>\n",
       "      <th>eval_metric</th>\n",
       "      <th>pred_time_test</th>\n",
       "      <th>pred_time_val</th>\n",
       "      <th>fit_time</th>\n",
       "      <th>pred_time_test_marginal</th>\n",
       "      <th>pred_time_val_marginal</th>\n",
       "      <th>fit_time_marginal</th>\n",
       "      <th>stack_level</th>\n",
       "      <th>can_infer</th>\n",
       "      <th>fit_order</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RandomForestGini_BAG_L1</td>\n",
       "      <td>0.952524</td>\n",
       "      <td>0.943612</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.235677</td>\n",
       "      <td>6.870326</td>\n",
       "      <td>5.811011</td>\n",
       "      <td>0.235677</td>\n",
       "      <td>6.870326</td>\n",
       "      <td>5.811011</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WeightedEnsemble_L2</td>\n",
       "      <td>0.952524</td>\n",
       "      <td>0.943612</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.237677</td>\n",
       "      <td>6.870326</td>\n",
       "      <td>5.818685</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.007674</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WeightedEnsemble_L3</td>\n",
       "      <td>0.952524</td>\n",
       "      <td>0.943612</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.243905</td>\n",
       "      <td>6.870832</td>\n",
       "      <td>5.816280</td>\n",
       "      <td>0.008228</td>\n",
       "      <td>0.000506</td>\n",
       "      <td>0.005269</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     model  score_test  score_val eval_metric  pred_time_test  \\\n",
       "0  RandomForestGini_BAG_L1    0.952524   0.943612    accuracy        0.235677   \n",
       "1      WeightedEnsemble_L2    0.952524   0.943612    accuracy        0.237677   \n",
       "2      WeightedEnsemble_L3    0.952524   0.943612    accuracy        0.243905   \n",
       "\n",
       "   pred_time_val  fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n",
       "0       6.870326  5.811011                 0.235677                6.870326   \n",
       "1       6.870326  5.818685                 0.002000                0.000000   \n",
       "2       6.870832  5.816280                 0.008228                0.000506   \n",
       "\n",
       "   fit_time_marginal  stack_level  can_infer  fit_order  \n",
       "0           5.811011            1       True          1  \n",
       "1           0.007674            2       True          2  \n",
       "2           0.005269            3       True          3  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Leaderboard for the trained model\n",
    "predictor.leaderboard(test_new, silent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3698902a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Summary of fit() ***\n",
      "Estimated performance of each model:\n",
      "                     model  score_val eval_metric  pred_time_val  fit_time  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n",
      "0      WeightedEnsemble_L2   0.943612    accuracy       6.870326  5.818685                0.000000           0.007674            2       True          2\n",
      "1  RandomForestGini_BAG_L1   0.943612    accuracy       6.870326  5.811011                6.870326           5.811011            1       True          1\n",
      "2      WeightedEnsemble_L3   0.943612    accuracy       6.870832  5.816280                0.000506           0.005269            3       True          3\n",
      "Number of models trained: 3\n",
      "Types of models trained:\n",
      "{'WeightedEnsembleModel', 'StackerEnsembleModel_RF'}\n",
      "Bagging used: True  (with 8 folds)\n",
      "Multi-layer stack-ensembling used: True  (with 3 levels)\n",
      "Feature Metadata (Processed):\n",
      "(raw dtype, special dtypes):\n",
      "('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n",
      "Plot summary of models saved to file: agModels-predictClassesSummaryOfModels.html\n",
      "*** End of fit() summary ***\n"
     ]
    }
   ],
   "source": [
    "results2 = predictor.fit_summary(show_plot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "5a7e587c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(Image(filename=r'C:\\Users\\willi\\Downloads\\bokeh_plot2.png'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "512b5508",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AutoGluon infers problem type is:  multiclass\n",
      "AutoGluon identified the following types of features:\n",
      "('int', []) : 3005 | ['gen1', 'gen2', 'gen3', 'gen4', 'gen5', ...]\n"
     ]
    }
   ],
   "source": [
    "print(\"AutoGluon infers problem type is: \", predictor.problem_type)\n",
    "print(\"AutoGluon identified the following types of features:\")\n",
    "print(predictor.feature_metadata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ffb68ed5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: AutoGluon with SMOTE\n",
      "\n",
      "Accuracy:\n",
      " 0.9525243168133395\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           1       0.91      0.81      0.86       467\n",
      "           2       0.95      0.94      0.95       457\n",
      "           3       0.87      0.89      0.88       489\n",
      "           4       0.96      0.97      0.96       467\n",
      "           5       0.98      0.99      0.99       526\n",
      "           6       0.98      0.97      0.98       520\n",
      "           7       0.97      0.99      0.98       456\n",
      "           8       0.96      0.99      0.98       465\n",
      "           9       0.98      1.00      0.99       471\n",
      "\n",
      "    accuracy                           0.95      4318\n",
      "   macro avg       0.95      0.95      0.95      4318\n",
      "weighted avg       0.95      0.95      0.95      4318\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      " [[379  14  47   6   4   2   5   6   4]\n",
      " [  5 430  13   8   0   0   0   1   0]\n",
      " [ 29   6 437   3   4   3   2   5   0]\n",
      " [  1   1   2 452   2   3   2   3   1]\n",
      " [  0   0   0   0 522   3   0   1   0]\n",
      " [  2   0   1   2   0 507   2   2   4]\n",
      " [  0   0   0   2   1   0 453   0   0]\n",
      " [  0   0   1   0   0   0   2 462   0]\n",
      " [  0   0   0   0   0   0   0   0 471]]\n"
     ]
    }
   ],
   "source": [
    "y_pred2_new = predictor.predict(test_nolab_new, model='RandomForestGini_BAG_L1')\n",
    "print('Model: AutoGluon with SMOTE')\n",
    "print('\\nAccuracy:\\n', accuracy_score(y_test_new, y_pred2_new))\n",
    "print('\\nClassification Report:\\n', classification_report(y_test_new, y_pred2_new))\n",
    "print('\\nConfusion Matrix:\\n', confusion_matrix(y_test_new, y_pred2_new))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9787207e",
   "metadata": {},
   "source": [
    "AutoGluon stacks all top classifiers. The model has improved significantly after using SMOTE to resample the data set. Choosing the same model, RandomForestGini_BAG_L1, the resampled model can predict 95% accurate, a 14% higher comparing to 81% before resampling the data set. F1-score range also increased from 0.39-0.92 to 0.86-0.99, a much less variable range as there are more supports for each classes of cell types."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
